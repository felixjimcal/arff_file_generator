import datetime
import arff
import talib
import numpy as np
import pandas as pd
from binance.futures import Futures
from XTBApi.api import Client, PERIOD
from utils import credentials

HIGH = 'high'
LOW = 'low'
TIMESTAMP = 'timestamp'
OPEN = 'open'
CLOSE = 'close'
VOLUME = 'volume'
CTM_STRING = 'ctm_string'

RATE_INFO = 'rateInfos'

if __name__ == "__main__":
    collect_data_from_binance = True
    if collect_data_from_binance:  # get dara from binance
        asset = 'BTCUSDT'
        client = Futures(key='<api_key>', secret='<api_secret>')
        ohlc = client.klines(asset, "1d", **{"limit": 1500})  # limit 1500
        ohlc.pop()  # https://binance-docs.github.io/apidocs/futures/en/#kline-candlestick-data
        df_day = pd.DataFrame(ohlc, columns=[TIMESTAMP, OPEN, HIGH, LOW, CLOSE, VOLUME, 'close_time', 'quote_av', 'trades', 'tb_base_av', 'tb_quote_av', 'ignore'])
        df_day = df_day.drop(['close_time', 'quote_av', 'trades', 'tb_base_av', 'tb_quote_av', 'ignore'], axis=1)
        df_day.insert(1, CTM_STRING, np.nan)
        df_day[CTM_STRING] = [str(datetime.datetime.utcfromtimestamp(x / 1000).strftime('%d/%m/%Y')) for x in df_day.timestamp]
        for col in df_day.columns[2:]:
            df_day[col] = pd.to_numeric(df_day[col])
    else:  # get data from XTB
        client = Client()
        client.login(credentials.XTB_DEMO_ID, credentials.XTB_PASS_KEY, mode='demo')

        end = datetime.datetime.today().timestamp()
        start = datetime.datetime.timestamp(datetime.datetime.now() - datetime.timedelta(weeks=2))
        chart_day = client.get_chart_range_request('BITCOIN', PERIOD.ONE_DAY.value, start, end, 0)
        digits = int('1' + ('0' * chart_day['digits']))
        for rate in chart_day[RATE_INFO]:
            rate[CLOSE] = (rate[OPEN] + rate[CLOSE]) / digits
            rate[HIGH] = (rate[OPEN] + rate[HIGH]) / digits
            rate[LOW] = (rate[OPEN] + rate[LOW]) / digits
            rate[OPEN] = (rate[OPEN] / digits)
            df_day = pd.DataFrame(chart_day[RATE_INFO])

    df_day['ema'] = round(talib.EMA(df_day.close, 20), 4)
    df_day['RSI'] = round(talib.RSI(df_day.close, 14), 4)
    df_day['AD'] = round(talib.AD(df_day.high, df_day.low, df_day.close, df_day.volume), 4)
    df_day['ADOSC'] = round(talib.ADOSC(df_day.high, df_day.low, df_day.close, df_day.volume, fastperiod=3, slowperiod=10), 4)
    df_day['ADX'] = round(talib.ADX(df_day.high, df_day.low, df_day.close, timeperiod=14), 4)
    df_day['ADXR'] = round(talib.ADXR(df_day.high, df_day.low, df_day.close, timeperiod=14), 4)
    df_day['APO'] = round(talib.APO(df_day.close, fastperiod=12, slowperiod=26, matype=0), 4)
    # aroondown, aroonup = talib.AROON(df_day.high, df_day.low, timeperiod=14)
    # df_day['AROON'] = round(talib.AROON(), 4)
    # df_day['AROONOSC'] = round(talib.AROONOSC(), 4)
    # df_day['ATR'] = round(talib.ATR(), 4)
    # df_day['AVGPRICE'] = round(talib.AVGPRICE(), 4)
    # df_day['BBANDS'] = round(talib.BBANDS(), 4)
    # df_day['BETA'] = round(talib.BETA(), 4)
    # df_day['BOP'] = round(talib.BOP(), 4)
    # df_day['CCI'] = round(talib.CCI(), 4)
    # df_day['CDL2CROWS'] = round(talib.CDL2CROWS(), 4)
    # df_day['CDL3BLACKCROWS'] = round(talib.CDL3BLACKCROWS(), 4)
    # df_day['CDL3INSIDE'] = round(talib.CDL3INSIDE(), 4)
    # df_day['CDL3LINESTRIKE'] = round(talib.CDL3LINESTRIKE(), 4)
    # df_day['CDL3OUTSIDE'] = round(talib.CDL3OUTSIDE(), 4)
    # df_day['CDL3STARSINSOUTH'] = round(talib.CDL3STARSINSOUTH(), 4)
    # df_day['CDL3WHITESOLDIERS'] = round(talib.CDL3WHITESOLDIERS(), 4)
    # df_day['CDLABANDONEDBABY'] = round(talib.CDLABANDONEDBABY(), 4)
    # df_day['CDLADVANCEBLOCK'] = round(talib.CDLADVANCEBLOCK(), 4)
    # df_day['CDLBELTHOLD'] = round(talib.CDLBELTHOLD(), 4)
    # df_day['CDLBREAKAWAY'] = round(talib.CDLBREAKAWAY(), 4)
    # df_day['CDLCLOSINGMARUBOZU'] = round(talib.CDLCLOSINGMARUBOZU(), 4)
    # df_day['CDLCONCEALBABYSWALL'] = round(talib.CDLCONCEALBABYSWALL(), 4)
    # df_day['CDLCOUNTERATTACK'] = round(talib.CDLCOUNTERATTACK(), 4)
    # df_day['CDLDARKCLOUDCOVER'] = round(talib.CDLDARKCLOUDCOVER(), 4)
    # df_day['CDLDOJI'] = round(talib.CDLDOJI(), 4)
    # df_day['CDLDOJISTAR'] = round(talib.CDLDOJISTAR(), 4)
    # df_day['CDLDRAGONFLYDOJI'] = round(talib.CDLDRAGONFLYDOJI(), 4)
    # df_day['CDLENGULFING'] = round(talib.CDLENGULFING(), 4)
    # df_day['CDLEVENINGDOJISTAR'] = round(talib.CDLEVENINGDOJISTAR(), 4)
    # df_day['CDLEVENINGSTAR'] = round(talib.CDLEVENINGSTAR(), 4)
    # df_day['CDLGAPSIDESIDEWHITE'] = round(talib.CDLGAPSIDESIDEWHITE(), 4)
    # df_day['CDLGRAVESTONEDOJI'] = round(talib.CDLGRAVESTONEDOJI(), 4)
    # df_day['CDLHAMMER'] = round(talib.CDLHAMMER(), 4)
    # df_day['CDLHANGINGMAN'] = round(talib.CDLHANGINGMAN(), 4)
    # df_day['CDLHARAMI'] = round(talib.CDLHARAMI(), 4)
    # df_day['CDLHARAMICROSS'] = round(talib.CDLHARAMICROSS(), 4)
    # df_day['CDLHIGHWAVE'] = round(talib.CDLHIGHWAVE(), 4)
    # df_day['CDLHIKKAKE'] = round(talib.CDLHIKKAKE(), 4)
    # df_day['CDLHIKKAKEMOD'] = round(talib.CDLHIKKAKEMOD(), 4)
    # df_day['CDLHOMINGPIGEON'] = round(talib.CDLHOMINGPIGEON(), 4)
    # df_day['CDLIDENTICAL3CROWS'] = round(talib.CDLIDENTICAL3CROWS(), 4)
    # df_day['CDLINNECK'] = round(talib.CDLINNECK(), 4)
    # df_day['CDLINVERTEDHAMMER'] = round(talib.CDLINVERTEDHAMMER(), 4)
    # df_day['CDLKICKING'] = round(talib.CDLKICKING(), 4)
    # df_day['CDLKICKINGBYLENGTH'] = round(talib.CDLKICKINGBYLENGTH(), 4)
    # df_day['CDLLADDERBOTTOM'] = round(talib.CDLLADDERBOTTOM(), 4)
    # df_day['CDLLONGLEGGEDDOJI'] = round(talib.CDLLONGLEGGEDDOJI(), 4)
    # df_day['CDLLONGLINE'] = round(talib.CDLLONGLINE(), 4)
    # df_day['CDLMARUBOZU'] = round(talib.CDLMARUBOZU(), 4)
    # df_day['CDLMATCHINGLOW'] = round(talib.CDLMATCHINGLOW(), 4)
    # df_day['CDLMATHOLD'] = round(talib.CDLMATHOLD(), 4)
    # df_day['CDLMORNINGDOJISTAR'] = round(talib.CDLMORNINGDOJISTAR(), 4)
    # df_day['CDLMORNINGSTAR'] = round(talib.CDLMORNINGSTAR(), 4)
    # df_day['CDLONNECK'] = round(talib.CDLONNECK(), 4)
    # df_day['CDLPIERCING'] = round(talib.CDLPIERCING(), 4)
    # df_day['CDLRICKSHAWMAN'] = round(talib.CDLRICKSHAWMAN(), 4)
    # df_day['CDLRISEFALL3METHODS'] = round(talib.CDLRISEFALL3METHODS(), 4)
    # df_day['CDLSEPARATINGLINES'] = round(talib.CDLSEPARATINGLINES(), 4)
    # df_day['CDLSHOOTINGSTAR'] = round(talib.CDLSHOOTINGSTAR(), 4)
    # df_day['CDLSHORTLINE'] = round(talib.CDLSHORTLINE(), 4)
    # df_day['CDLSPINNINGTOP'] = round(talib.CDLSPINNINGTOP(), 4)
    # df_day['CDLSTALLEDPATTERN'] = round(talib.CDLSTALLEDPATTERN(), 4)
    # df_day['CDLSTICKSANDWICH'] = round(talib.CDLSTICKSANDWICH(), 4)
    # df_day['CDLTAKURI'] = round(talib.CDLTAKURI(), 4)
    # df_day['CDLTASUKIGAP'] = round(talib.CDLTASUKIGAP(), 4)
    # df_day['CDLTHRUSTING'] = round(talib.CDLTHRUSTING(), 4)
    # df_day['CDLTRISTAR'] = round(talib.CDLTRISTAR(), 4)
    # df_day['CDLUNIQUE3RIVER'] = round(talib.CDLUNIQUE3RIVER(), 4)
    # df_day['CDLUPSIDEGAP2CROWS'] = round(talib.CDLUPSIDEGAP2CROWS(), 4)
    # df_day['CDLXSIDEGAP3METHODS'] = round(talib.CDLXSIDEGAP3METHODS(), 4)
    # df_day['CMO'] = round(talib.CMO(), 4)
    # df_day['CORREL'] = round(talib.CORREL(), 4)
    # df_day['DEMA'] = round(talib.DEMA(), 4)
    # df_day['DX'] = round(talib.DX(), 4)
    # df_day['EMA'] = round(talib.EMA(), 4)
    # df_day['HT_DCPERIOD'] = round(talib.HT_DCPERIOD(), 4)
    # df_day['HT_DCPHASE'] = round(talib.HT_DCPHASE(), 4)
    # df_day['HT_PHASOR'] = round(talib.HT_PHASOR(), 4)
    # df_day['HT_SINE'] = round(talib.HT_SINE(), 4)
    # df_day['HT_TRENDLINE'] = round(talib.HT_TRENDLINE(), 4)
    # df_day['HT_TRENDMODE'] = round(talib.HT_TRENDMODE(), 4)
    # df_day['KAMA'] = round(talib.KAMA(), 4)
    # df_day['LINEARREG'] = round(talib.LINEARREG(), 4)
    # df_day['LINEARREG_ANGLE'] = round(talib.LINEARREG_ANGLE(), 4)
    # df_day['LINEARREG_INTERCEPT'] = round(talib.LINEARREG_INTERCEPT(), 4)
    # df_day['LINEARREG_SLOPE'] = round(talib.LINEARREG_SLOPE(), 4)
    # df_day['MA'] = round(talib.MA(), 4)
    # df_day['MACD'] = round(talib.MACD(), 4)
    # df_day['MACDEXT'] = round(talib.MACDEXT(), 4)
    # df_day['MACDFIX'] = round(talib.MACDFIX(), 4)
    # df_day['MAMA'] = round(talib.MAMA(), 4)
    # df_day['MAX'] = round(talib.MAX(), 4)
    # df_day['MAXINDEX'] = round(talib.MAXINDEX(), 4)
    # df_day['MEDPRICE'] = round(talib.MEDPRICE(), 4)
    # df_day['MFI'] = round(talib.MFI(), 4)
    # df_day['MIDPOINT'] = round(talib.MIDPOINT(), 4)
    # df_day['MIDPRICE'] = round(talib.MIDPRICE(), 4)
    # df_day['MIN'] = round(talib.MIN(), 4)
    # df_day['MININDEX'] = round(talib.MININDEX(), 4)
    # df_day['MINMAX'] = round(talib.MINMAX(), 4)
    # df_day['MINMAXINDEX'] = round(talib.MINMAXINDEX(), 4)
    # df_day['MINUS_DI'] = round(talib.MINUS_DI(), 4)
    # df_day['MINUS_DM'] = round(talib.MINUS_DM(), 4)
    # df_day['MOM'] = round(talib.MOM(), 4)
    # df_day['NATR'] = round(talib.NATR(), 4)
    # df_day['OBV'] = round(talib.OBV(df_day.close, df_day.volume), 4)
    # df_day['PLUS_DI'] = round(talib.PLUS_DI(), 4)
    # df_day['PLUS_DM'] = round(talib.PLUS_DM(), 4)
    # df_day['PPO'] = round(talib.PPO(), 4)
    # df_day['ROC'] = round(talib.ROC(), 4)
    # df_day['ROCP'] = round(talib.ROCP(), 4)
    # df_day['ROCR'] = round(talib.ROCR(), 4)
    # df_day['ROCR100'] = round(talib.ROCR100(), 4)
    # df_day['RSI'] = round(talib.RSI(), 4)
    # df_day['SAR'] = round(talib.SAR(), 4)
    # df_day['SAREXT'] = round(talib.SAREXT(), 4)
    # df_day['SMA'] = round(talib.SMA(), 4)
    # df_day['STDDEV'] = round(talib.STDDEV(), 4)
    # df_day['STOCH'] = round(talib.STOCH(), 4)
    # df_day['STOCHF'] = round(talib.STOCHF(), 4)
    # df_day['STOCHRSI'] = round(talib.STOCHRSI(), 4)
    # df_day['SUM'] = round(talib.SUM(), 4)
    # df_day['T3'] = round(talib.T3(), 4)
    # df_day['TEMA'] = round(talib.TEMA(), 4)
    # df_day['TRANGE'] = round(talib.TRANGE(), 4)
    # df_day['TRIMA'] = round(talib.TRIMA(), 4)
    # df_day['TRIX'] = round(talib.TRIX(), 4)
    # df_day['TSF'] = round(talib.TSF(), 4)
    # df_day['TYPPRICE'] = round(talib.TYPPRICE(), 4)
    # df_day['ULTOSC'] = round(talib.ULTOSC(), 4)
    # df_day['VAR'] = round(talib.VAR(), 4)
    # df_day['WCLPRICE'] = round(talib.WCLPRICE(), 4)
    # df_day['WILLR'] = round(talib.WILLR(), 4)
    # df_day['WMA'] = round(talib.WMA(), 4)
    df_day["BULL"] = np.where(df_day.close.diff() >= 0.02, True, False)

    for col in df_day.columns:
        df_day.dropna(subset=[col], inplace=True)
    arff.dump(asset + '.arff', df_day.values, relation=asset, names=df_day.columns)
